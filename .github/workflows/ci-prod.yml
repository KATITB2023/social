name: Production CI

# 1
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [ production ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
#2
env:
  REGISTRY: "registry.digitalocean.com/kat-registry"
  IMAGE_NAME: "social"

#3
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout the repo 
        uses: actions/checkout@v2
        
      - name: Build container image
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):prod-latest --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} --build-arg NEXT_PUBLIC_WS_URL=${{ secrets.NEXT_PUBLIC_WS_URL }} --build-arg NEXT_PUBLIC_BUCKET_API_KEY=${{ secrets.NEXT_PUBLIC_BUCKET_API_KEY }} .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
      
      # - name: Remove all old images
      #   run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):prod-latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Run deployment script over SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST_PROD }}
          port: 22
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY_PROD }}
          script: |
            cd /var/www/html
            docker compose -f docker-compose.prod.yml pull social 
            docker compose -f docker-compose.prod.yml up -d --remove-orphans
            docker image prune -f